{"version":3,"sources":["get-flat-array.js"],"names":["groupsFromBackend","id","name","groups","getComponentFlatArray","incomingArray","componentFlatArray","getFlatArray","sortedByParentIdArray","innerArray","parentId","targetArray","forEach","treeElement","flatArrayElement","Node","push","newParentId","length","currentObject","this","children","inputArray","sort","a","b"],"mappings":"AACA,aAEA,MAAMA,kBAAoB,CACxB,CACEC,GAAI,EACJC,KAAM,OACNC,OAAQ,CACN,CACEF,GAAI,EACJC,KAAM,6BACNC,OAAQ,CACN,CACEF,GAAI,EACJC,KAAM,eACNC,OAAQ,IAEV,CACEF,GAAI,EACJC,KAAM,wBACNC,OAAQ,IAEV,CACEF,GAAI,EACJC,KAAM,YACNC,OAAQ,MAId,CACEF,GAAI,EACJC,KAAM,8BACNC,OAAQ,CACN,CACEF,GAAI,EACJC,KAAM,iBACNC,OAAQ,IAEV,CACEF,GAAI,EACJC,KAAM,gBACNC,OAAQ,IAEV,CACEF,GAAI,EACJC,KAAM,2CACNC,OAAQ,MAId,CACEF,GAAI,GACJC,KAAM,kBACNC,OAAQ,IAEV,CACEF,GAAI,GACJC,KAAM,oBACNC,OAAQ,IAEV,CACEF,GAAI,GACJC,KAAM,qBACNC,OAAQ,MAId,CACEF,GAAI,GACJC,KAAM,8BACNC,OAAQ,IAEV,CACEF,GAAI,GACJC,KAAM,qBACNC,OAAQ,IAEV,CACEF,GAAI,GACJC,KAAM,qBACNC,OAAQ,KAIZ,SAASC,sBAAsBC,GAC7B,IAAIC,EAAqB,GAOzB,OAHAC,aAAaF,EAFE,EAEuBC,GAEtCE,sBAAsBF,GACfA,EAGT,SAASC,aAAaE,EAAYC,EAAUC,GAC1CF,EAAWG,SAASC,IAClB,IAAIC,EAAmB,IAAIC,KAAKF,EAAaH,GAC7CC,EAAYK,KAAKF,GACjB,IAAIG,EAAcJ,EAAgB,GAEG,IAAjCA,EAAoB,OAAEK,QACxBX,aAAaM,EAAoB,OAAGI,EAAaN,MAMvD,SAASI,KAAKI,EAAeT,GAC3B,IAAIT,GAACA,EAAEC,KAAEA,EAAIC,OAAEA,GAAUgB,EACzBC,KAAKV,SAAWA,EAChBU,KAAKnB,GAAKA,EACVmB,KAAKlB,KAAOA,EACU,IAAlBC,EAAOe,OACTE,KAAKC,UAAW,EAEhBD,KAAKC,UAAW,EAIpB,SAASb,sBAAsBc,GAI7B,OAHAA,EAAWC,MAAK,SAAUC,EAAGC,GAC3B,OAAOD,EAAEd,SAAWe,EAAEf,YAEjBY,EAGT,IAAIhB,mBAAqBF,sBAAsBJ,0BAKvCM","file":"get-flat-array.min.js","sourcesContent":["/* eslint-disable no-console */\n'use strict';\n\nconst groupsFromBackend = [\n  {\n    id: 1,\n    name: 'Дети',\n    groups: [\n      {\n        id: 2,\n        name: 'Имеющие редкие заболевания',\n        groups: [\n          {\n            id: 3,\n            name: 'Spina Bifida',\n            groups: [],\n          },\n          {\n            id: 4,\n            name: 'Буллёзный эпидермолиз',\n            groups: [],\n          },\n          {\n            id: 5,\n            name: 'Гемофилия',\n            groups: [],\n          },\n        ],\n      },\n      {\n        id: 6,\n        name: 'Имеющие тяжелые заболевания',\n        groups: [\n          {\n            id: 7,\n            name: 'Синдром Лежена',\n            groups: [],\n          },\n          {\n            id: 8,\n            name: 'Синдром Ретта',\n            groups: [],\n          },\n          {\n            id: 9,\n            name: 'Эктодермальная ангидротическая дисплазия',\n            groups: [],\n          },\n        ],\n      },\n      {\n        id: 10,\n        name: 'С инвалидностью',\n        groups: [],\n      },\n      {\n        id: 11,\n        name: 'ВИЧ-положительные',\n        groups: [],\n      },\n      {\n        id: 12,\n        name: 'Мигранты и беженцы',\n        groups: [],\n      },\n    ],\n  },\n  {\n    id: 13,\n    name: 'Профессиональные сообщества',\n    groups: [],\n  },\n  {\n    id: 14,\n    name: 'Местные сообщества',\n    groups: [],\n  },\n  {\n    id: 15,\n    name: 'Религиозные общины',\n    groups: [],\n  },\n];\n\nfunction getComponentFlatArray(incomingArray) {\n  let componentFlatArray = [];\n  // id коневого списка компонентов\n  let parentId = 0;\n\n  getFlatArray(incomingArray, parentId, componentFlatArray);\n  // сортируем выходной массив по parentId\n  sortedByParentIdArray(componentFlatArray);\n  return componentFlatArray;\n}\n\nfunction getFlatArray(innerArray, parentId, targetArray) {\n  innerArray.forEach((treeElement) => {\n    let flatArrayElement = new Node(treeElement, parentId);\n    targetArray.push(flatArrayElement);\n    let newParentId = treeElement['id'];\n\n    if (treeElement['groups'].length !== 0) {\n      getFlatArray(treeElement['groups'], newParentId, targetArray);\n    }\n  });\n}\n\n// конструктор нового элемента для плоского массива\nfunction Node(currentObject, parentId) {\n  let {id, name, groups} = currentObject;\n  this.parentId = parentId;\n  this.id = id;\n  this.name = name;\n  if (groups.length === 0) {\n    this.children = false;\n  } else {\n    this.children = true;\n  }\n}\n\nfunction sortedByParentIdArray(inputArray) {\n  inputArray.sort(function (a, b) {\n    return a.parentId - b.parentId;\n  });\n  return inputArray;\n}\n\nlet componentFlatArray = getComponentFlatArray(groupsFromBackend);\n// componentFlatArray.forEach((element) => {\n//   console.log(element);\n// });\n\nexport {componentFlatArray};\n"]}